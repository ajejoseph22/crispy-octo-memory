{"version":3,"sources":["util/methods.ts","enum/scroll-direction.ts","context/index.ts","components/month/index.tsx","components/date-area/index.tsx","components/display-area/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["daysInMonth","month","year","Date","getDate","getAbsoluteValue","monthNumber","ScrollDirection","DateAreaContext","React","createContext","DateAreaProvider","Provider","Consumer","StyledHeader","styled","h3","DaysWrapper","div","StyledDay","MonthContainer","Month","innerRef","scrollDirection","updateYear","useContext","scrollMemo","className","ref","moment","monthsShort","Array","keys","map","date","style","height","onIntersect","entries","Down","janShown","decHidden","Up","decShown","onHide","console","log","onShow","DateAreaWrapper","StyledYear","DateArea","useState","getMonth","startingMonth","setScrollDirection","scrollPosition","setScrollPosition","setYear","middle","end","range","i","push","getRangeOfMonthsFromMiddle","months","setMonths","monthRefs","useRef","dateAreaRef","useEffect","key","current","scrollIntoView","onScroll","e","currentScrollTop","currentTarget","scrollTop","scrollHeight","clientHeight","arrayOfMonthNumbers","start","length","newStart","addMonthsToBottom","unshift","addMonthsToTop","scrollBy","value","newYear","el","DisplayAreaWrapper","DisplayArea","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0965721a.chunk.js","sourcesContent":["export function daysInMonth(month: number, year: number): number {\n  return new Date(year, month, 0).getDate()\n}\n\nexport function getRangeOfMonthsFromMiddle(middle: number): number[] {\n  const start = middle - 3\n  const end = middle + 3\n  const range = []\n  for (let i = start; i <= end; i += 1) {\n    if (i < 0) {\n      range.push(12 + i)\n    } else if (i < 11) {\n      range.push(i)\n    } else {\n      range.push(12 - i)\n    }\n  }\n\n  return range\n}\n\nfunction getAbsoluteValue(monthNumber: number): number {\n  if (monthNumber < 0) {\n    return 12 + monthNumber\n  }\n\n  if (monthNumber > 11) {\n    return monthNumber - 12\n  }\n\n  return monthNumber\n}\n\nexport function addMonthsToTop(arrayOfMonthNumbers: number[]): number[] {\n  const start = arrayOfMonthNumbers[0]\n\n  const newStart = start - 3\n\n  for (let i = start - 1; i >= newStart; i -= 1) {\n    arrayOfMonthNumbers.unshift(getAbsoluteValue(i))\n  }\n\n  return arrayOfMonthNumbers\n}\n\nexport function addMonthsToBottom(arrayOfMonthNumbers: number[]): number[] {\n  const start = arrayOfMonthNumbers[arrayOfMonthNumbers.length - 1]\n\n  const newStart = start + 3\n\n  for (let i = start + 1; i <= newStart; i += 1) {\n    arrayOfMonthNumbers.push(getAbsoluteValue(i))\n  }\n\n  return arrayOfMonthNumbers\n}\n","// eslint-disable-next-line import/prefer-default-export\nexport enum ScrollDirection {\n  Down = 'Down',\n  Up = 'Up',\n}\n","import React from 'react'\n\nconst DateAreaContext = React.createContext({})\n\nexport const DateAreaProvider = DateAreaContext.Provider\nexport const DateAreaConsumer = DateAreaContext.Consumer\n\nexport default DateAreaContext\n","import React, { Ref, useContext } from 'react'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport IntersectionVisible from 'react-intersection-visible'\nimport { daysInMonth } from '../../util/methods'\nimport './index.css'\nimport { ScrollDirection } from '../../enum/scroll-direction'\nimport DateAreaContext from '../../context'\nimport { DateAreaContextType } from '../../types/date-area-context'\n\nconst StyledHeader = styled.h3`\n  margin: 5% 0;\n  text-align: center;\n  //position: fixed;\n`\n\nconst DaysWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow-x: auto;\n  width: fit-content;\n  height: 90%;\n  margin: auto;\n`\n\nconst StyledDay = styled.div`\n  width: 50px;\n  background: #fff;\n  text-align: center;\n  border: solid 1px #d9d9d9;\n  cursor: pointer;\n`\n\nconst MonthContainer = styled.div`\n  height: 40%;\n`\n\n// const janIsVisible = useOnScreen(monthRefs.current[`${0}-${year}`])\n\nconst Month: React.FC<{\n  month: number\n  year: number\n  scrollDirection: ScrollDirection\n  innerRef: Ref<HTMLDivElement>\n}> = ({ month, year, innerRef, scrollDirection }) => {\n  const { updateYear } = useContext(DateAreaContext) as DateAreaContextType\n\n  const scrollMemo: { [key: string]: boolean } = {}\n\n  const onHide = (entries: Event): void => {\n    // If Scrolling down and Dec is hidden, decrement year\n    if (month === 11 && scrollDirection === ScrollDirection.Down) {\n      console.log(`onHide for month Dec`)\n      // console.log(scrollMemo)\n      // updateYear(year - 1)\n      scrollMemo.decHidden = true\n    }\n\n    // // If Scrolling up and Jan is hidden, decrement year\n    // if (\n    //   month === 0 &&\n    //   scrollDirection === ScrollDirection.Up &&\n    //   scrollMemo[ScrollDirection.Up] !== 'decrement'\n    // ) {\n    //   console.log('Scrolling up and Jan is hidden, decrement year')\n    //   updateYear(year - 1)\n    //   scrollMemo[ScrollDirection.Up] = 'decrement'\n    // }\n  }\n\n  const onShow = (entries: Event): void => {\n    console.log(`onShow for month ${month === 11 ? 'Dec' : 'Jan'}`)\n    // If Scrolling up and Dec is shown, increment year\n    if (month === 11 && scrollDirection === ScrollDirection.Up) {\n      scrollMemo.decShown = true\n      updateYear(year + 1)\n    }\n\n    // // If Scrolling down and Jan is shown, decrement year\n    if (month === 0) {\n      scrollMemo.janShown = true\n      console.log('January shown')\n      // updateYear(year - 1)\n      // scrollMemo[ScrollDirection.Down] = 'decrement'\n    }\n  }\n\n  const onIntersect = (entries: Event): void => {\n    if (\n      scrollDirection === ScrollDirection.Down &&\n      scrollMemo.janShown &&\n      scrollMemo.decHidden\n    ) {\n      updateYear(year - 1)\n    }\n\n    if (\n      scrollDirection === ScrollDirection.Up &&\n      scrollMemo.janShown &&\n      scrollMemo.decShown\n    ) {\n      updateYear(year + 1)\n    }\n  }\n\n  return month !== 0 && month !== 11 ? (\n    <MonthContainer className=\"month-container\" ref={innerRef}>\n      <StyledHeader className=\"header\">\n        {moment.monthsShort(month)}\n      </StyledHeader>\n\n      <DaysWrapper className=\"days-wrapper\">\n        {[...Array(daysInMonth(month + 1, year)).keys()].map((date) => (\n          <StyledDay key={date}>{date + 1}</StyledDay>\n        ))}\n      </DaysWrapper>\n    </MonthContainer>\n  ) : (\n    <IntersectionVisible\n      style={{ height: '40%' }}\n      onIntersect={onIntersect}\n      onHide={onHide}\n      onShow={onShow}\n    >\n      <StyledHeader className=\"header\">\n        {moment.monthsShort(month)}\n      </StyledHeader>\n\n      <DaysWrapper className=\"days-wrapper\">\n        {[...Array(daysInMonth(month + 1, year)).keys()].map((date) => (\n          <StyledDay key={date}>{date + 1}</StyledDay>\n        ))}\n      </DaysWrapper>\n    </IntersectionVisible>\n  )\n}\n\nexport default Month\n","import React, { useEffect, useRef, useState } from 'react'\nimport styled from 'styled-components'\nimport Month from '../month'\nimport {\n  addMonthsToBottom,\n  addMonthsToTop,\n  getRangeOfMonthsFromMiddle,\n} from '../../util/methods'\nimport { ScrollDirection } from '../../enum/scroll-direction'\nimport { DateAreaProvider } from '../../context'\n\nconst DateAreaWrapper = styled.div`\n  width: 25%;\n  background: pink;\n  float: left;\n  height: 100vh;\n  border-right: 1px solid #d9d9d9;\n  overflow-x: auto;\n`\n\nconst StyledYear = styled.div`\n  background: #fff;\n  height: 20px;\n  position: absolute;\n  top: 0;\n  left: 0;\n  padding: 5px;\n`\n\nconst DateAreaContext = React.createContext({})\n\nconst DateArea: React.FC = () => {\n  const [startingMonth, setStartingMonth] = useState<number>(\n    new Date().getMonth()\n  )\n  const [janWasVisible, setJanWasVisible] = useState<boolean>(false)\n  const [scrollDirection, setScrollDirection] = useState<ScrollDirection>(\n    ScrollDirection.Down\n  )\n  const [scrollPosition, setScrollPosition] = useState<number>(0)\n  const [year, setYear] = useState<number>(2021)\n  const [months, setMonths] = useState<number[]>(\n    getRangeOfMonthsFromMiddle(startingMonth)\n  )\n  const monthRefs = React.useRef<{ [id: string]: HTMLDivElement }>({})\n  const dateAreaRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    const key = `${startingMonth}-${year}`\n    if (monthRefs.current[key]) {\n      monthRefs.current[key].scrollIntoView()\n    }\n  }, [startingMonth, year])\n\n  const handleOnScroll = (e: React.UIEvent<HTMLElement>) => {\n    const currentScrollTop = e.currentTarget.scrollTop\n\n    debugger\n    if (scrollPosition > currentScrollTop) {\n      setScrollDirection(ScrollDirection.Up)\n    } else if (scrollPosition < currentScrollTop) {\n      setScrollDirection(ScrollDirection.Down)\n    }\n\n    setScrollPosition(currentScrollTop)\n\n    const bottom =\n      e.currentTarget.scrollHeight - currentScrollTop <=\n      e.currentTarget.clientHeight * 1.2\n\n    if (bottom) {\n      // load more months into state\n      setMonths(addMonthsToBottom([...months]))\n    }\n    // if element is at top\n    else if (dateAreaRef.current && dateAreaRef.current.scrollTop < 1) {\n      // load more months into state\n      setMonths(addMonthsToTop([...months]))\n      // adjust the scroll position\n      dateAreaRef.current.scrollBy(0, dateAreaRef.current.clientHeight * 1.2)\n    }\n  }\n\n  const updateYear = (newYear: number): void => {\n    setYear(newYear)\n  }\n\n  // const janIsVisible = useOnScreen(monthRefs.current[`${0}-${year}`])\n\n  return (\n    <DateAreaWrapper ref={dateAreaRef} onScroll={handleOnScroll}>\n      <DateAreaProvider\n        value={{\n          updateYear,\n        }}\n      >\n        <StyledYear className=\"year\">{year}</StyledYear>\n        {months.map((month) => (\n          <Month\n            scrollDirection={scrollDirection}\n            innerRef={(el: HTMLDivElement): void => {\n              monthRefs.current[`${month}-${year}`] = el\n            }}\n            month={month}\n            year={year}\n            // key={`${month}-${year}`}\n          />\n        ))}\n      </DateAreaProvider>\n    </DateAreaWrapper>\n  )\n}\n\nexport default DateArea\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst DisplayAreaWrapper = styled.div`\n  height: 100vh;\n  background: greenyellow;\n`\n\nconst DisplayArea: React.FC = () => {\n  return <DisplayAreaWrapper />\n}\n\nexport default DisplayArea\n","import React from 'react'\nimport './App.css'\nimport DateArea from './components/date-area'\nimport DisplayArea from './components/display-area'\n\nfunction App(): JSX.Element {\n  return (\n    <div>\n      <DateArea />\n      <DisplayArea />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}